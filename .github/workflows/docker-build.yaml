name: Docker Build

on:
  workflow_call:
    inputs:
      push_to_registry:
        type: boolean
        default: false
        required: false
      version:
        type: string
        required: true
      branch:
        type: string
        required: true
      platforms:
        type: string
        default: 'linux/amd64'
        required: false
    secrets:
      AWS_ACCOUNT_NUMBER:
        required: true
      AWS_ROLE:
        required: true
      AWS_REGION:
        required: true

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_NUMBER }}:role/${{ secrets.AWS_ROLE }}
          role-session-name: updateimage
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ secrets.AWS_ACCOUNT_NUMBER }}

      - name: Set Docker tags based on branch
        id: set_tags
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          if [[ "${{ inputs.branch }}" == "main" ]]; then
            echo "TAGS=$ECR_REGISTRY/hydroshift:latest,$ECR_REGISTRY/hydroshift:${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "TAGS=$ECR_REGISTRY/hydroshift:pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./.devcontainer
          platforms: ${{ inputs.platforms }}
          push: ${{ inputs.push_to_registry }}
          tags: ${{ steps.set_tags.outputs.TAGS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
